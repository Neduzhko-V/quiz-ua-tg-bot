import json
import random
from aiogram import Bot, Dispatcher, types, executor

with open('questions.json', 'r', encoding='utf-8') as f:
    questions = json.load(f)

TOKEN = '6039938046:AAGYBvWteseUS05K4p8aVIAxQML5ASjQ5NE'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

user_scores = {}
used_questions = {}


@dp.message_handler(commands=['start'])
async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    user_scores[user_id] = 0
    used_questions[user_id] = []

    await message.reply("–ü—Ä–∏–≤—ñ—Çüëã\n–Ø –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É ü´∂üá∫üá¶ \n–°–ø–æ–¥—ñ–≤–∞—é—Å—è —Ç–∏ –Ω–∞–±–µ—Ä–µ—à –≤–∏—Å–æ–∫–∏–π –±–∞–ª, —É–¥–∞—á—ñ")
    await ask_question(message.chat.id)


async def ask_question(chat_id):
    user_id = chat_id
    if len(used_questions[user_id]) == len(questions):
        used_questions[user_id] = []  # –Ø–∫—â–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ, –æ—á–∏—â–∞—î —Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å

    available_questions = [q for q in questions if q not in used_questions[user_id]]
    random_question = random.choice(available_questions)
    used_questions[user_id].append(random_question)  # –î–æ–¥–∞—Ç—å –≤–∏–±—Ä–∞–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
    question_text = random_question['question']
    answers = random_question['answers']

    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    random.shuffle(answers)
    for answer in answers:
        keyboard_markup.add(answer)
        
    await bot.send_message(chat_id, question_text, reply_markup=keyboard_markup)


@dp.message_handler()
async def process_answer(message: types.Message):
    user_id = message.from_user.id
    answer = message.text

    for question in questions:
        if answer in question['answers']:
            if answer == question['correct_answer']:
                user_scores[user_id] += question['points']
                await bot.send_message(message.chat.id, "üü¢‚úîÔ∏è–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!")
            else:
                await bot.send_message(message.chat.id, f"üî¥‚úñÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question['correct_answer']}")
            await check_game_over(message.chat.id)
            return

    await bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")


async def check_game_over(chat_id):
    user_id = chat_id
    if len(used_questions[user_id]) == len(questions):
        score = user_scores[user_id]
        keyboard_markup = types.ReplyKeyboardRemove()
        await bot.send_message(chat_id, f"–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–∞—Ö—É–Ω–æ–∫: {score}/250 –±–∞–ª—ñ–≤.\n–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start", reply_markup=keyboard_markup)
        used_questions[user_id] = []  # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏
    else:
        await ask_question(chat_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
